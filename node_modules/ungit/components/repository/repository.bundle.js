(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var async = require('async');
var _ = require('lodash');

components.register('repository', function(args) {
  return new RepositoryViewModel(args.server, args.repoPath);
});

var RepositoryViewModel = function(server, repoPath) {
  var self = this;

  this.server = server;
  this.repoPath = repoPath;
  this.gitErrors = components.create('gitErrors', { server: server, repoPath: repoPath });
  this.graph = components.create('graph', { server: server, repoPath: repoPath });
  this.remotes = components.create('remotes', { server: server, repoPath: repoPath });
  this.submodules = components.create('submodules', { server: server, repoPath: repoPath });
  this.stash = components.create('stash', { server: server, repoPath: repoPath });
  this.staging = components.create('staging', { server: server, repoPath: repoPath });
  this.branches = components.create('branches', { server: server, repoPath: repoPath });
  this.showLog = ko.computed(function() {
    return !self.staging.inRebase() && !self.staging.inMerge();
  });
  this.server.watchRepository(repoPath);
  this.isSubmodule = ko.observable(false);
  this.parentModulePath = ko.observable();
  this.parentModuleLink = ko.observable();
  this.refreshSubmoduleStatus();
  if (window.location.search.indexOf('noheader=true') >= 0) {
    this.refreshButton = components.create('refreshbutton');
  } else {
    this.refreshButton = false;
  }
}
RepositoryViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('repository', this, {}, parentElement);
}
RepositoryViewModel.prototype.onProgramEvent = function(event) {
  if (this.gitErrors.onProgramEvent) this.gitErrors.onProgramEvent(event);
  if (this.graph.onProgramEvent) this.graph.onProgramEvent(event);
  if (this.staging.onProgramEvent) this.staging.onProgramEvent(event);
  if (this.stash.onProgramEvent) this.stash.onProgramEvent(event);
  if (this.remotes.onProgramEvent) this.remotes.onProgramEvent(event);
  if (this.submodules.onProgramEvent) this.submodules.onProgramEvent(event);
  if (this.branches.onProgramEvent) this.branches.onProgramEvent(event);

  // If we get a reconnect event it's usually because the server crashed and then restarted
  // or something like that, so we need to tell it to start watching the path again
  if (event.event == 'connected') {
    this.server.watchRepository(this.repoPath);
  } else if (event.event == 'request-app-content-refresh') {

  }
}
RepositoryViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.graph.updateAnimationFrame) this.graph.updateAnimationFrame(deltaT);
}
RepositoryViewModel.prototype.refreshSubmoduleStatus = function() {
  var self = this;
  this.server.get('/baserepopath', { path: this.repoPath }, function(err, baseRepoPath) {
    if (err) {
      self.isSubmodule(false);
      return true;
    }

    self.server.get('/submodules', { path: baseRepoPath.path }, function(err, submodules) {
      if (!err && Array.isArray(submodules)) {
        var baseName = self.repoPath.replace(/^.*[\\\/]/, '');

        for (var n = 0; n < submodules.length; n++) {
          if (submodules[n].path === baseName) {
            self.isSubmodule(true);
            self.parentModulePath(baseRepoPath.path);
            self.parentModuleLink('/#/repository?path=' + encodeURIComponent(baseRepoPath.path));
            return;
          }
        }
      }

      self.isSubmodule(false);
      return true;
    });
  });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3JlcG9zaXRvcnkvcmVwb3NpdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcbnZhciBrbyA9IHJlcXVpcmUoJ2tub2Nrb3V0Jyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG52YXIgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdyZXBvc2l0b3J5JywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IFJlcG9zaXRvcnlWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucmVwb1BhdGgpO1xufSk7XG5cbnZhciBSZXBvc2l0b3J5Vmlld01vZGVsID0gZnVuY3Rpb24oc2VydmVyLCByZXBvUGF0aCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMucmVwb1BhdGggPSByZXBvUGF0aDtcbiAgdGhpcy5naXRFcnJvcnMgPSBjb21wb25lbnRzLmNyZWF0ZSgnZ2l0RXJyb3JzJywgeyBzZXJ2ZXI6IHNlcnZlciwgcmVwb1BhdGg6IHJlcG9QYXRoIH0pO1xuICB0aGlzLmdyYXBoID0gY29tcG9uZW50cy5jcmVhdGUoJ2dyYXBoJywgeyBzZXJ2ZXI6IHNlcnZlciwgcmVwb1BhdGg6IHJlcG9QYXRoIH0pO1xuICB0aGlzLnJlbW90ZXMgPSBjb21wb25lbnRzLmNyZWF0ZSgncmVtb3RlcycsIHsgc2VydmVyOiBzZXJ2ZXIsIHJlcG9QYXRoOiByZXBvUGF0aCB9KTtcbiAgdGhpcy5zdWJtb2R1bGVzID0gY29tcG9uZW50cy5jcmVhdGUoJ3N1Ym1vZHVsZXMnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogcmVwb1BhdGggfSk7XG4gIHRoaXMuc3Rhc2ggPSBjb21wb25lbnRzLmNyZWF0ZSgnc3Rhc2gnLCB7IHNlcnZlcjogc2VydmVyLCByZXBvUGF0aDogcmVwb1BhdGggfSk7XG4gIHRoaXMuc3RhZ2luZyA9IGNvbXBvbmVudHMuY3JlYXRlKCdzdGFnaW5nJywgeyBzZXJ2ZXI6IHNlcnZlciwgcmVwb1BhdGg6IHJlcG9QYXRoIH0pO1xuICB0aGlzLmJyYW5jaGVzID0gY29tcG9uZW50cy5jcmVhdGUoJ2JyYW5jaGVzJywgeyBzZXJ2ZXI6IHNlcnZlciwgcmVwb1BhdGg6IHJlcG9QYXRoIH0pO1xuICB0aGlzLnNob3dMb2cgPSBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXNlbGYuc3RhZ2luZy5pblJlYmFzZSgpICYmICFzZWxmLnN0YWdpbmcuaW5NZXJnZSgpO1xuICB9KTtcbiAgdGhpcy5zZXJ2ZXIud2F0Y2hSZXBvc2l0b3J5KHJlcG9QYXRoKTtcbiAgdGhpcy5pc1N1Ym1vZHVsZSA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLnBhcmVudE1vZHVsZVBhdGggPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMucGFyZW50TW9kdWxlTGluayA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5yZWZyZXNoU3VibW9kdWxlU3RhdHVzKCk7XG4gIGlmICh3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoJ25vaGVhZGVyPXRydWUnKSA+PSAwKSB7XG4gICAgdGhpcy5yZWZyZXNoQnV0dG9uID0gY29tcG9uZW50cy5jcmVhdGUoJ3JlZnJlc2hidXR0b24nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlZnJlc2hCdXR0b24gPSBmYWxzZTtcbiAgfVxufVxuUmVwb3NpdG9yeVZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ3JlcG9zaXRvcnknLCB0aGlzLCB7fSwgcGFyZW50RWxlbWVudCk7XG59XG5SZXBvc2l0b3J5Vmlld01vZGVsLnByb3RvdHlwZS5vblByb2dyYW1FdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmICh0aGlzLmdpdEVycm9ycy5vblByb2dyYW1FdmVudCkgdGhpcy5naXRFcnJvcnMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuICBpZiAodGhpcy5ncmFwaC5vblByb2dyYW1FdmVudCkgdGhpcy5ncmFwaC5vblByb2dyYW1FdmVudChldmVudCk7XG4gIGlmICh0aGlzLnN0YWdpbmcub25Qcm9ncmFtRXZlbnQpIHRoaXMuc3RhZ2luZy5vblByb2dyYW1FdmVudChldmVudCk7XG4gIGlmICh0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KSB0aGlzLnN0YXNoLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMucmVtb3Rlcy5vblByb2dyYW1FdmVudCkgdGhpcy5yZW1vdGVzLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuc3VibW9kdWxlcy5vblByb2dyYW1FdmVudCkgdGhpcy5zdWJtb2R1bGVzLm9uUHJvZ3JhbUV2ZW50KGV2ZW50KTtcbiAgaWYgKHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQpIHRoaXMuYnJhbmNoZXMub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xuXG4gIC8vIElmIHdlIGdldCBhIHJlY29ubmVjdCBldmVudCBpdCdzIHVzdWFsbHkgYmVjYXVzZSB0aGUgc2VydmVyIGNyYXNoZWQgYW5kIHRoZW4gcmVzdGFydGVkXG4gIC8vIG9yIHNvbWV0aGluZyBsaWtlIHRoYXQsIHNvIHdlIG5lZWQgdG8gdGVsbCBpdCB0byBzdGFydCB3YXRjaGluZyB0aGUgcGF0aCBhZ2FpblxuICBpZiAoZXZlbnQuZXZlbnQgPT0gJ2Nvbm5lY3RlZCcpIHtcbiAgICB0aGlzLnNlcnZlci53YXRjaFJlcG9zaXRvcnkodGhpcy5yZXBvUGF0aCk7XG4gIH0gZWxzZSBpZiAoZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtYXBwLWNvbnRlbnQtcmVmcmVzaCcpIHtcblxuICB9XG59XG5SZXBvc2l0b3J5Vmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGRlbHRhVCkge1xuICBpZiAodGhpcy5ncmFwaC51cGRhdGVBbmltYXRpb25GcmFtZSkgdGhpcy5ncmFwaC51cGRhdGVBbmltYXRpb25GcmFtZShkZWx0YVQpO1xufVxuUmVwb3NpdG9yeVZpZXdNb2RlbC5wcm90b3R5cGUucmVmcmVzaFN1Ym1vZHVsZVN0YXR1cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyLmdldCgnL2Jhc2VyZXBvcGF0aCcsIHsgcGF0aDogdGhpcy5yZXBvUGF0aCB9LCBmdW5jdGlvbihlcnIsIGJhc2VSZXBvUGF0aCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHNlbGYuaXNTdWJtb2R1bGUoZmFsc2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2VsZi5zZXJ2ZXIuZ2V0KCcvc3VibW9kdWxlcycsIHsgcGF0aDogYmFzZVJlcG9QYXRoLnBhdGggfSwgZnVuY3Rpb24oZXJyLCBzdWJtb2R1bGVzKSB7XG4gICAgICBpZiAoIWVyciAmJiBBcnJheS5pc0FycmF5KHN1Ym1vZHVsZXMpKSB7XG4gICAgICAgIHZhciBiYXNlTmFtZSA9IHNlbGYucmVwb1BhdGgucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpO1xuXG4gICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgc3VibW9kdWxlcy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgIGlmIChzdWJtb2R1bGVzW25dLnBhdGggPT09IGJhc2VOYW1lKSB7XG4gICAgICAgICAgICBzZWxmLmlzU3VibW9kdWxlKHRydWUpO1xuICAgICAgICAgICAgc2VsZi5wYXJlbnRNb2R1bGVQYXRoKGJhc2VSZXBvUGF0aC5wYXRoKTtcbiAgICAgICAgICAgIHNlbGYucGFyZW50TW9kdWxlTGluaygnLyMvcmVwb3NpdG9yeT9wYXRoPScgKyBlbmNvZGVVUklDb21wb25lbnQoYmFzZVJlcG9QYXRoLnBhdGgpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VsZi5pc1N1Ym1vZHVsZShmYWxzZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG4iXX0=
