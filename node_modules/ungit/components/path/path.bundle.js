(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');
var addressParser = require('ungit-address-parser');
var navigation = require('ungit-navigation');

components.register('path', function(args) {
  return new PathViewModel(args.server, args.path);
});

var PathViewModel = function(server, path) {
  var self = this;
  this.server = server;
  this.path = path;
  this.dirName = this.path.replace('\\', '/')
                   .split('/')
                   .filter(function(s) { return s; })
                   .slice(-1)[0] || '/';

  this.status = ko.observable('loading');
  this.loadingProgressBar = components.create('progressBar', { predictionMemoryKey: 'path-loading-' + path });
  this.loadingProgressBar.start();
  this.cloningProgressBar = components.create('progressBar', {
    predictionMemoryKey: 'path-cloning-' + path,
    fallbackPredictedTimeMs: 10000
  });
  this.cloneUrl = ko.observable();
  this.showDirectoryCreatedAlert = ko.observable(false);
  this.cloneDestinationImplicit = ko.computed(function() {
    var defaultText = 'destination folder';
    if (!self.cloneUrl()) return defaultText;

    var parsedAddress = addressParser.parseAddress(self.cloneUrl());
    return parsedAddress.shortProject || defaultText;
  });
  this.cloneDestination = ko.observable();
  this.repository = ko.observable();
}
PathViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('path', this, {}, parentElement);
}
PathViewModel.prototype.template = 'path';
PathViewModel.prototype.shown = function() {
  this.updateStatus();
}
PathViewModel.prototype.updateAnimationFrame = function(deltaT) {
  if (this.repository())
    this.repository().updateAnimationFrame(deltaT);
}
PathViewModel.prototype.updateStatus = function() {
  var self = this;
  this.server.get('/quickstatus', { path: this.path }, function(err, status){
    self.loadingProgressBar.stop();
    if (err) return;
    if (status == 'inited') {
      self.status('repository');
      if (!self.repository())
        self.repository(components.create('repository', { server: self.server, repoPath: self.path }));
    } else if (status == 'uninited') {
      self.status('uninited');
      self.repository(null);
    } else if (status == 'no-such-path') {
      self.status('invalidpath');
      self.repository(null);
    }
  });
}
PathViewModel.prototype.initRepository = function() {
  var self = this;
  this.server.post('/init', { path: this.path }, function(err, res) {
    if (err) return;
    self.updateStatus();
  });
}
PathViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-credentials') this.cloningProgressBar.pause();
  else if (event.event == 'request-credentials-response') this.cloningProgressBar.unpause();
  else if (event.event == 'working-tree-changed') this.updateStatus();
  else if (event.event == 'request-app-content-refresh') this.updateStatus();

  if (this.repository()) this.repository().onProgramEvent(event);
}
PathViewModel.prototype.cloneRepository = function() {
  var self = this;
  self.status('cloning');
  this.cloningProgressBar.start();
  var dest = this.cloneDestination() || this.cloneDestinationImplicit();

  this.server.post('/clone', { path: this.path, url: this.cloneUrl(), destinationDir: dest }, function(err, res) {
    self.cloningProgressBar.stop();
    if (err) return;
    navigation.browseTo('repository?path=' + encodeURIComponent(res.path));
  });
}
PathViewModel.prototype.createDir = function() {
  var self = this;
  this.showDirectoryCreatedAlert(true);
  this.server.post('/createDir',  {dir: this.path }, function() {
    self.updateStatus();
  });
}

 

},{"knockout":"knockout","ungit-address-parser":"ungit-address-parser","ungit-components":"ungit-components","ungit-navigation":"ungit-navigation"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3BhdGgvcGF0aC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgYWRkcmVzc1BhcnNlciA9IHJlcXVpcmUoJ3VuZ2l0LWFkZHJlc3MtcGFyc2VyJyk7XG52YXIgbmF2aWdhdGlvbiA9IHJlcXVpcmUoJ3VuZ2l0LW5hdmlnYXRpb24nKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcigncGF0aCcsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBQYXRoVmlld01vZGVsKGFyZ3Muc2VydmVyLCBhcmdzLnBhdGgpO1xufSk7XG5cbnZhciBQYXRoVmlld01vZGVsID0gZnVuY3Rpb24oc2VydmVyLCBwYXRoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIHRoaXMuZGlyTmFtZSA9IHRoaXMucGF0aC5yZXBsYWNlKCdcXFxcJywgJy8nKVxuICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihzKSB7IHJldHVybiBzOyB9KVxuICAgICAgICAgICAgICAgICAgIC5zbGljZSgtMSlbMF0gfHwgJy8nO1xuXG4gIHRoaXMuc3RhdHVzID0ga28ub2JzZXJ2YWJsZSgnbG9hZGluZycpO1xuICB0aGlzLmxvYWRpbmdQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ3BhdGgtbG9hZGluZy0nICsgcGF0aCB9KTtcbiAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIgPSBjb21wb25lbnRzLmNyZWF0ZSgncHJvZ3Jlc3NCYXInLCB7XG4gICAgcHJlZGljdGlvbk1lbW9yeUtleTogJ3BhdGgtY2xvbmluZy0nICsgcGF0aCxcbiAgICBmYWxsYmFja1ByZWRpY3RlZFRpbWVNczogMTAwMDBcbiAgfSk7XG4gIHRoaXMuY2xvbmVVcmwgPSBrby5vYnNlcnZhYmxlKCk7XG4gIHRoaXMuc2hvd0RpcmVjdG9yeUNyZWF0ZWRBbGVydCA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xuICB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0VGV4dCA9ICdkZXN0aW5hdGlvbiBmb2xkZXInO1xuICAgIGlmICghc2VsZi5jbG9uZVVybCgpKSByZXR1cm4gZGVmYXVsdFRleHQ7XG5cbiAgICB2YXIgcGFyc2VkQWRkcmVzcyA9IGFkZHJlc3NQYXJzZXIucGFyc2VBZGRyZXNzKHNlbGYuY2xvbmVVcmwoKSk7XG4gICAgcmV0dXJuIHBhcnNlZEFkZHJlc3Muc2hvcnRQcm9qZWN0IHx8IGRlZmF1bHRUZXh0O1xuICB9KTtcbiAgdGhpcy5jbG9uZURlc3RpbmF0aW9uID0ga28ub2JzZXJ2YWJsZSgpO1xuICB0aGlzLnJlcG9zaXRvcnkgPSBrby5vYnNlcnZhYmxlKCk7XG59XG5QYXRoVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgncGF0aCcsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLnRlbXBsYXRlID0gJ3BhdGgnO1xuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuc2hvd24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy51cGRhdGVTdGF0dXMoKTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZUFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oZGVsdGFUKSB7XG4gIGlmICh0aGlzLnJlcG9zaXRvcnkoKSlcbiAgICB0aGlzLnJlcG9zaXRvcnkoKS51cGRhdGVBbmltYXRpb25GcmFtZShkZWx0YVQpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlU3RhdHVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIuZ2V0KCcvcXVpY2tzdGF0dXMnLCB7IHBhdGg6IHRoaXMucGF0aCB9LCBmdW5jdGlvbihlcnIsIHN0YXR1cyl7XG4gICAgc2VsZi5sb2FkaW5nUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICBpZiAoc3RhdHVzID09ICdpbml0ZWQnKSB7XG4gICAgICBzZWxmLnN0YXR1cygncmVwb3NpdG9yeScpO1xuICAgICAgaWYgKCFzZWxmLnJlcG9zaXRvcnkoKSlcbiAgICAgICAgc2VsZi5yZXBvc2l0b3J5KGNvbXBvbmVudHMuY3JlYXRlKCdyZXBvc2l0b3J5JywgeyBzZXJ2ZXI6IHNlbGYuc2VydmVyLCByZXBvUGF0aDogc2VsZi5wYXRoIH0pKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSAndW5pbml0ZWQnKSB7XG4gICAgICBzZWxmLnN0YXR1cygndW5pbml0ZWQnKTtcbiAgICAgIHNlbGYucmVwb3NpdG9yeShudWxsKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PSAnbm8tc3VjaC1wYXRoJykge1xuICAgICAgc2VsZi5zdGF0dXMoJ2ludmFsaWRwYXRoJyk7XG4gICAgICBzZWxmLnJlcG9zaXRvcnkobnVsbCk7XG4gICAgfVxuICB9KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLmluaXRSZXBvc2l0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zZXJ2ZXIucG9zdCgnL2luaXQnLCB7IHBhdGg6IHRoaXMucGF0aCB9LCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICBzZWxmLnVwZGF0ZVN0YXR1cygpO1xuICB9KTtcbn1cblBhdGhWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWNyZWRlbnRpYWxzJykgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIucGF1c2UoKTtcbiAgZWxzZSBpZiAoZXZlbnQuZXZlbnQgPT0gJ3JlcXVlc3QtY3JlZGVudGlhbHMtcmVzcG9uc2UnKSB0aGlzLmNsb25pbmdQcm9ncmVzc0Jhci51bnBhdXNlKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICd3b3JraW5nLXRyZWUtY2hhbmdlZCcpIHRoaXMudXBkYXRlU3RhdHVzKCk7XG4gIGVsc2UgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWFwcC1jb250ZW50LXJlZnJlc2gnKSB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuXG4gIGlmICh0aGlzLnJlcG9zaXRvcnkoKSkgdGhpcy5yZXBvc2l0b3J5KCkub25Qcm9ncmFtRXZlbnQoZXZlbnQpO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuY2xvbmVSZXBvc2l0b3J5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgc2VsZi5zdGF0dXMoJ2Nsb25pbmcnKTtcbiAgdGhpcy5jbG9uaW5nUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdmFyIGRlc3QgPSB0aGlzLmNsb25lRGVzdGluYXRpb24oKSB8fCB0aGlzLmNsb25lRGVzdGluYXRpb25JbXBsaWNpdCgpO1xuXG4gIHRoaXMuc2VydmVyLnBvc3QoJy9jbG9uZScsIHsgcGF0aDogdGhpcy5wYXRoLCB1cmw6IHRoaXMuY2xvbmVVcmwoKSwgZGVzdGluYXRpb25EaXI6IGRlc3QgfSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICBzZWxmLmNsb25pbmdQcm9ncmVzc0Jhci5zdG9wKCk7XG4gICAgaWYgKGVycikgcmV0dXJuO1xuICAgIG5hdmlnYXRpb24uYnJvd3NlVG8oJ3JlcG9zaXRvcnk/cGF0aD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlcy5wYXRoKSk7XG4gIH0pO1xufVxuUGF0aFZpZXdNb2RlbC5wcm90b3R5cGUuY3JlYXRlRGlyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5zaG93RGlyZWN0b3J5Q3JlYXRlZEFsZXJ0KHRydWUpO1xuICB0aGlzLnNlcnZlci5wb3N0KCcvY3JlYXRlRGlyJywgIHtkaXI6IHRoaXMucGF0aCB9LCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLnVwZGF0ZVN0YXR1cygpO1xuICB9KTtcbn1cblxuIFxuIl19
