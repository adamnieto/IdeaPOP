(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var moment = require('moment');
var components = require('ungit-components');

components.register('stash', function(args) {
  return new StashViewModel(args.server, args.repoPath);
});

function StashItemViewModel(stash, data) {
  this.stash = stash;
  this.server = stash.server;
  this.id = data.id;
  this.title = data.name + ' ' + moment(new Date(data.date)).fromNow();
  this.body = data.title;
  this.stashPopProgressBar = components.create('progressBar', { predictionMemoryKey: 'stash-pop', temporary: true });
}
StashItemViewModel.prototype.pop = function() {
  var self = this;
  this.stashPopProgressBar.start();
  this.server.del('/stashes/' + this.id, { path: this.stash.repoPath, pop: true }, function(err, res) {
    self.stashPopProgressBar.stop();
  });
}
StashItemViewModel.prototype.drop = function() {
  var self = this;
  this.stashPopProgressBar.start();
  this.server.del('/stashes/' + this.id, { path: this.stash.repoPath }, function(err, res) {
    self.stashPopProgressBar.stop();
  });
}

function StashViewModel(server, repoPath) {
  var self = this;
  this.server = server;
  this.repoPath = repoPath;
  this.stashedChanges = ko.observable([]);
  this.isShow = ko.observable(localStorage['showStash'] === 'true');
  this.visible = ko.computed(function() { return self.stashedChanges().length > 0 && self.isShow(); });
  this.refresh();
}

StashViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('stash', this, {}, parentElement);
}
StashViewModel.prototype.onProgramEvent = function(event) {
  if (event.event == 'request-app-content-refresh' ||
    event.event == 'working-tree-changed' ||
    event.event == 'git-directory-changed')
    this.refresh();
}
StashViewModel.prototype.refresh = function() {
  var self = this;
  this.server.get('/stashes', { path: this.repoPath }, function(err, stashes) {
    if (err) {
      if (err.errorCode == 'no-such-path') return true;
      return;
    }
    self.stashedChanges(stashes.map(function(item) { return new StashItemViewModel(self, item); }));
  });
}
StashViewModel.prototype.toggleShowStash = function() {
  this.isShow(!this.isShow());
  localStorage['showStash'] = this.isShow();
}

},{"knockout":"knockout","moment":"moment","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL3N0YXNoL3N0YXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBtb21lbnQgPSByZXF1aXJlKCdtb21lbnQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdzdGFzaCcsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgcmV0dXJuIG5ldyBTdGFzaFZpZXdNb2RlbChhcmdzLnNlcnZlciwgYXJncy5yZXBvUGF0aCk7XG59KTtcblxuZnVuY3Rpb24gU3Rhc2hJdGVtVmlld01vZGVsKHN0YXNoLCBkYXRhKSB7XG4gIHRoaXMuc3Rhc2ggPSBzdGFzaDtcbiAgdGhpcy5zZXJ2ZXIgPSBzdGFzaC5zZXJ2ZXI7XG4gIHRoaXMuaWQgPSBkYXRhLmlkO1xuICB0aGlzLnRpdGxlID0gZGF0YS5uYW1lICsgJyAnICsgbW9tZW50KG5ldyBEYXRlKGRhdGEuZGF0ZSkpLmZyb21Ob3coKTtcbiAgdGhpcy5ib2R5ID0gZGF0YS50aXRsZTtcbiAgdGhpcy5zdGFzaFBvcFByb2dyZXNzQmFyID0gY29tcG9uZW50cy5jcmVhdGUoJ3Byb2dyZXNzQmFyJywgeyBwcmVkaWN0aW9uTWVtb3J5S2V5OiAnc3Rhc2gtcG9wJywgdGVtcG9yYXJ5OiB0cnVlIH0pO1xufVxuU3Rhc2hJdGVtVmlld01vZGVsLnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnN0YXNoUG9wUHJvZ3Jlc3NCYXIuc3RhcnQoKTtcbiAgdGhpcy5zZXJ2ZXIuZGVsKCcvc3Rhc2hlcy8nICsgdGhpcy5pZCwgeyBwYXRoOiB0aGlzLnN0YXNoLnJlcG9QYXRoLCBwb3A6IHRydWUgfSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICBzZWxmLnN0YXNoUG9wUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICB9KTtcbn1cblN0YXNoSXRlbVZpZXdNb2RlbC5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc3Rhc2hQb3BQcm9ncmVzc0Jhci5zdGFydCgpO1xuICB0aGlzLnNlcnZlci5kZWwoJy9zdGFzaGVzLycgKyB0aGlzLmlkLCB7IHBhdGg6IHRoaXMuc3Rhc2gucmVwb1BhdGggfSwgZnVuY3Rpb24oZXJyLCByZXMpIHtcbiAgICBzZWxmLnN0YXNoUG9wUHJvZ3Jlc3NCYXIuc3RvcCgpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gU3Rhc2hWaWV3TW9kZWwoc2VydmVyLCByZXBvUGF0aCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc3Rhc2hlZENoYW5nZXMgPSBrby5vYnNlcnZhYmxlKFtdKTtcbiAgdGhpcy5pc1Nob3cgPSBrby5vYnNlcnZhYmxlKGxvY2FsU3RvcmFnZVsnc2hvd1N0YXNoJ10gPT09ICd0cnVlJyk7XG4gIHRoaXMudmlzaWJsZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VsZi5zdGFzaGVkQ2hhbmdlcygpLmxlbmd0aCA+IDAgJiYgc2VsZi5pc1Nob3coKTsgfSk7XG4gIHRoaXMucmVmcmVzaCgpO1xufVxuXG5TdGFzaFZpZXdNb2RlbC5wcm90b3R5cGUudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKHBhcmVudEVsZW1lbnQpIHtcbiAga28ucmVuZGVyVGVtcGxhdGUoJ3N0YXNoJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuU3Rhc2hWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWFwcC1jb250ZW50LXJlZnJlc2gnIHx8XG4gICAgZXZlbnQuZXZlbnQgPT0gJ3dvcmtpbmctdHJlZS1jaGFuZ2VkJyB8fFxuICAgIGV2ZW50LmV2ZW50ID09ICdnaXQtZGlyZWN0b3J5LWNoYW5nZWQnKVxuICAgIHRoaXMucmVmcmVzaCgpO1xufVxuU3Rhc2hWaWV3TW9kZWwucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlcnZlci5nZXQoJy9zdGFzaGVzJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoIH0sIGZ1bmN0aW9uKGVyciwgc3Rhc2hlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGlmIChlcnIuZXJyb3JDb2RlID09ICduby1zdWNoLXBhdGgnKSByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZi5zdGFzaGVkQ2hhbmdlcyhzdGFzaGVzLm1hcChmdW5jdGlvbihpdGVtKSB7IHJldHVybiBuZXcgU3Rhc2hJdGVtVmlld01vZGVsKHNlbGYsIGl0ZW0pOyB9KSk7XG4gIH0pO1xufVxuU3Rhc2hWaWV3TW9kZWwucHJvdG90eXBlLnRvZ2dsZVNob3dTdGFzaCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmlzU2hvdyghdGhpcy5pc1Nob3coKSk7XG4gIGxvY2FsU3RvcmFnZVsnc2hvd1N0YXNoJ10gPSB0aGlzLmlzU2hvdygpO1xufVxuIl19
