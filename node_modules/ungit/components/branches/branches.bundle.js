(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var _ = require('lodash');
var async = require('async');
var components = require('ungit-components');
var programEvents = require('ungit-program-events');

components.register('branches', function(args) {
  return new BranchesViewModel(args.server, args.repoPath);
});

function BranchesViewModel(server, repoPath) {
  var self = this;
  this.repoPath = repoPath;
  this.server = server;
  this.branches = ko.observableArray();
  this.fetchingProgressBar = components.create('progressBar', { predictionMemoryKey: 'fetching-' + this.repoPath, temporary: true });
  this.current = ko.observable();
  this.fetchLabel = ko.computed(function() {
    if (self.current()) {
      return self.current();
    }
  });
  this.updateBranches();
}
BranchesViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('branches', this, {}, parentElement);
}
BranchesViewModel.prototype.clickFetch = function() { this.updateBranches(); }
BranchesViewModel.prototype.onProgramEvent = function(event) {
  if (event.event === 'working-tree-changed' || event.event == 'request-app-content-refresh' || event.event == 'branch-updated') {
    this.updateBranches();
  }
}
BranchesViewModel.prototype.checkoutBranch = function(branch) {
  var self = this;
  this.fetchingProgressBar.start();
  this.server.post('/checkout', { path: this.repoPath, name: branch.name }, function(err) {
    if (err) return;
    self.current(branch.name);
    self.fetchingProgressBar.stop();
  });
}
BranchesViewModel.prototype.updateBranches = function() {
  var self = this;
  this.fetchingProgressBar.start();
  this.server.get('/branches', { path: this.repoPath }, function(err, branches) {
    if (err) {
      self.current("~error");
      return;
    }

    if (branches) {
      var sorted = branches.sort(function(a, b) {
        if (a.name < b.name)
           return -1;
        if (a.name > b.name)
          return 1;
        return 0;
      });
      self.branches(sorted);
      self.current(undefined);
      branches.forEach(function(branch) {
        if (branch.current) {
          self.current(branch.name);
        }
      });
    }

    self.fetchingProgressBar.stop();
  });
}

BranchesViewModel.prototype.branchRemove = function(branch) {
  var self = this;
  var diag = components.create('yesnodialog', { title: 'Are you sure?', details: 'This operation cannot be undone with ungit.'});
  diag.closed.add(function() {
    if (diag.result()) {
      self.server.del('/branches', { name: branch.name, path: self.repoPath }, function(err) {
        if (!err) {
          programEvents.dispatch({ event: 'working-tree-changed' });
        }
      });
    }
  });
  programEvents.dispatch({ event: 'request-show-dialog', dialog: diag });
}

},{"async":"async","knockout":"knockout","lodash":"lodash","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2JyYW5jaGVzL2JyYW5jaGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXG52YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIF8gPSByZXF1aXJlKCdsb2Rhc2gnKTtcbnZhciBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJyk7XG52YXIgY29tcG9uZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LWNvbXBvbmVudHMnKTtcbnZhciBwcm9ncmFtRXZlbnRzID0gcmVxdWlyZSgndW5naXQtcHJvZ3JhbS1ldmVudHMnKTtcblxuY29tcG9uZW50cy5yZWdpc3RlcignYnJhbmNoZXMnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgQnJhbmNoZXNWaWV3TW9kZWwoYXJncy5zZXJ2ZXIsIGFyZ3MucmVwb1BhdGgpO1xufSk7XG5cbmZ1bmN0aW9uIEJyYW5jaGVzVmlld01vZGVsKHNlcnZlciwgcmVwb1BhdGgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlcG9QYXRoID0gcmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gc2VydmVyO1xuICB0aGlzLmJyYW5jaGVzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG4gIHRoaXMuZmV0Y2hpbmdQcm9ncmVzc0JhciA9IGNvbXBvbmVudHMuY3JlYXRlKCdwcm9ncmVzc0JhcicsIHsgcHJlZGljdGlvbk1lbW9yeUtleTogJ2ZldGNoaW5nLScgKyB0aGlzLnJlcG9QYXRoLCB0ZW1wb3Jhcnk6IHRydWUgfSk7XG4gIHRoaXMuY3VycmVudCA9IGtvLm9ic2VydmFibGUoKTtcbiAgdGhpcy5mZXRjaExhYmVsID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuY3VycmVudCgpKSB7XG4gICAgICByZXR1cm4gc2VsZi5jdXJyZW50KCk7XG4gICAgfVxuICB9KTtcbiAgdGhpcy51cGRhdGVCcmFuY2hlcygpO1xufVxuQnJhbmNoZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdicmFuY2hlcycsIHRoaXMsIHt9LCBwYXJlbnRFbGVtZW50KTtcbn1cbkJyYW5jaGVzVmlld01vZGVsLnByb3RvdHlwZS5jbGlja0ZldGNoID0gZnVuY3Rpb24oKSB7IHRoaXMudXBkYXRlQnJhbmNoZXMoKTsgfVxuQnJhbmNoZXNWaWV3TW9kZWwucHJvdG90eXBlLm9uUHJvZ3JhbUV2ZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50LmV2ZW50ID09PSAnd29ya2luZy10cmVlLWNoYW5nZWQnIHx8IGV2ZW50LmV2ZW50ID09ICdyZXF1ZXN0LWFwcC1jb250ZW50LXJlZnJlc2gnIHx8IGV2ZW50LmV2ZW50ID09ICdicmFuY2gtdXBkYXRlZCcpIHtcbiAgICB0aGlzLnVwZGF0ZUJyYW5jaGVzKCk7XG4gIH1cbn1cbkJyYW5jaGVzVmlld01vZGVsLnByb3RvdHlwZS5jaGVja291dEJyYW5jaCA9IGZ1bmN0aW9uKGJyYW5jaCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuZmV0Y2hpbmdQcm9ncmVzc0Jhci5zdGFydCgpO1xuICB0aGlzLnNlcnZlci5wb3N0KCcvY2hlY2tvdXQnLCB7IHBhdGg6IHRoaXMucmVwb1BhdGgsIG5hbWU6IGJyYW5jaC5uYW1lIH0sIGZ1bmN0aW9uKGVycikge1xuICAgIGlmIChlcnIpIHJldHVybjtcbiAgICBzZWxmLmN1cnJlbnQoYnJhbmNoLm5hbWUpO1xuICAgIHNlbGYuZmV0Y2hpbmdQcm9ncmVzc0Jhci5zdG9wKCk7XG4gIH0pO1xufVxuQnJhbmNoZXNWaWV3TW9kZWwucHJvdG90eXBlLnVwZGF0ZUJyYW5jaGVzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0YXJ0KCk7XG4gIHRoaXMuc2VydmVyLmdldCgnL2JyYW5jaGVzJywgeyBwYXRoOiB0aGlzLnJlcG9QYXRoIH0sIGZ1bmN0aW9uKGVyciwgYnJhbmNoZXMpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzZWxmLmN1cnJlbnQoXCJ+ZXJyb3JcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGJyYW5jaGVzKSB7XG4gICAgICB2YXIgc29ydGVkID0gYnJhbmNoZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChhLm5hbWUgPCBiLm5hbWUpXG4gICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgaWYgKGEubmFtZSA+IGIubmFtZSlcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9KTtcbiAgICAgIHNlbGYuYnJhbmNoZXMoc29ydGVkKTtcbiAgICAgIHNlbGYuY3VycmVudCh1bmRlZmluZWQpO1xuICAgICAgYnJhbmNoZXMuZm9yRWFjaChmdW5jdGlvbihicmFuY2gpIHtcbiAgICAgICAgaWYgKGJyYW5jaC5jdXJyZW50KSB7XG4gICAgICAgICAgc2VsZi5jdXJyZW50KGJyYW5jaC5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2VsZi5mZXRjaGluZ1Byb2dyZXNzQmFyLnN0b3AoKTtcbiAgfSk7XG59XG5cbkJyYW5jaGVzVmlld01vZGVsLnByb3RvdHlwZS5icmFuY2hSZW1vdmUgPSBmdW5jdGlvbihicmFuY2gpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZGlhZyA9IGNvbXBvbmVudHMuY3JlYXRlKCd5ZXNub2RpYWxvZycsIHsgdGl0bGU6ICdBcmUgeW91IHN1cmU/JywgZGV0YWlsczogJ1RoaXMgb3BlcmF0aW9uIGNhbm5vdCBiZSB1bmRvbmUgd2l0aCB1bmdpdC4nfSk7XG4gIGRpYWcuY2xvc2VkLmFkZChmdW5jdGlvbigpIHtcbiAgICBpZiAoZGlhZy5yZXN1bHQoKSkge1xuICAgICAgc2VsZi5zZXJ2ZXIuZGVsKCcvYnJhbmNoZXMnLCB7IG5hbWU6IGJyYW5jaC5uYW1lLCBwYXRoOiBzZWxmLnJlcG9QYXRoIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgIHByb2dyYW1FdmVudHMuZGlzcGF0Y2goeyBldmVudDogJ3dvcmtpbmctdHJlZS1jaGFuZ2VkJyB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcHJvZ3JhbUV2ZW50cy5kaXNwYXRjaCh7IGV2ZW50OiAncmVxdWVzdC1zaG93LWRpYWxvZycsIGRpYWxvZzogZGlhZyB9KTtcbn1cbiJdfQ==
