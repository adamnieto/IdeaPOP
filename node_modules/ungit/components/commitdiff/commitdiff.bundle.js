(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ko = require('knockout');
var CommitLineDiff = require('./commitlinediff.js').CommitLineDiff;
var components = require('ungit-components');

components.register('commitDiff', function(args) {
  return new CommitDiff(args);
});

var CommitDiff = function(args) {
  this.commitLineDiffs = ko.observableArray();
  this.sha1 = args.sha1;
  args.fileLineDiffs.shift();  // remove first line that has "total"
  this.loadFileLineDiffs(args);
};

CommitDiff.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('commitdiff', this, {}, parentElement);
};

CommitDiff.prototype.loadFileLineDiffs = function(args) {
  var tempCommitLineDiffs = [];
  var lineDiffLength = this.commitLineDiffs().length;

  args.fileLineDiffs.slice(lineDiffLength === 0 ? 0 : lineDiffLength + 1, this.maxNumberOfFilesShown).forEach(function(fileLineDiff) {
    args.fileLineDiff = fileLineDiff;
    tempCommitLineDiffs.push(new CommitLineDiff(args));
  });

  this.commitLineDiffs(this.commitLineDiffs().concat(tempCommitLineDiffs));
}

},{"./commitlinediff.js":2,"knockout":"knockout","ungit-components":"ungit-components"}],2:[function(require,module,exports){
var ko = require('knockout');
var components = require('ungit-components');
var inherits = require('util').inherits;
var fileType = require('../../source/utils/file-type.js');
var programEvents = require('ungit-program-events');

var CommitLineDiff = function(args) {
  var self = this;
  this.added = ko.observable(args.fileLineDiff[0]);
  this.removed = ko.observable(args.fileLineDiff[1]);
  this.fileName = ko.observable(args.fileLineDiff[2]);
  this.isShowingDiffs = ko.observable(false);
  this.repoPath = args.repoPath;
  this.server = args.server;
  this.sha1 = args.sha1;
  this.textDiffType = args.textDiffType;
  this.specificDiff = ko.observable(this.getSpecificDiff());
};
exports.CommitLineDiff = CommitLineDiff;

CommitLineDiff.prototype.getSpecificDiff = function() {
  return components.create(!this.fileName() || fileType(this.fileName()) == 'text' ? 'textdiff' : 'imagediff', {
    filename: this.fileName(),
    repoPath: this.repoPath,
    server: this.server,
    sha1: this.sha1,
    textDiffType: this.textDiffType,
    isShowingDiffs: this.isShowingDiffs
  });
}

CommitLineDiff.prototype.fileNameClick = function() {
  this.isShowingDiffs(!this.isShowingDiffs());
  this.specificDiff().invalidateDiff(function() {
    programEvents.dispatch({ event: 'graph-render' });
  });
};

},{"../../source/utils/file-type.js":3,"knockout":"knockout","ungit-components":"ungit-components","ungit-program-events":"ungit-program-events","util":undefined}],3:[function(require,module,exports){
var path = require('path');
var imageFileExtensions = ['.PNG', '.JPG', '.BMP', '.GIF', '.JPEG'];

module.exports = function(fileName) {
  return imageFileExtensions.indexOf(path.extname(fileName).toUpperCase()) > -1 ? 'image' : 'text';
}

},{"path":undefined}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2NvbW1pdGRpZmYvY29tbWl0ZGlmZi5qcyIsImNvbXBvbmVudHMvY29tbWl0ZGlmZi9jb21taXRsaW5lZGlmZi5qcyIsInNvdXJjZS91dGlscy9maWxlLXR5cGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBDb21taXRMaW5lRGlmZiA9IHJlcXVpcmUoJy4vY29tbWl0bGluZWRpZmYuanMnKS5Db21taXRMaW5lRGlmZjtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdjb21taXREaWZmJywgZnVuY3Rpb24oYXJncykge1xuICByZXR1cm4gbmV3IENvbW1pdERpZmYoYXJncyk7XG59KTtcblxudmFyIENvbW1pdERpZmYgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHRoaXMuY29tbWl0TGluZURpZmZzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgYXJncy5maWxlTGluZURpZmZzLnNoaWZ0KCk7ICAvLyByZW1vdmUgZmlyc3QgbGluZSB0aGF0IGhhcyBcInRvdGFsXCJcbiAgdGhpcy5sb2FkRmlsZUxpbmVEaWZmcyhhcmdzKTtcbn07XG5cbkNvbW1pdERpZmYucHJvdG90eXBlLnVwZGF0ZU5vZGUgPSBmdW5jdGlvbihwYXJlbnRFbGVtZW50KSB7XG4gIGtvLnJlbmRlclRlbXBsYXRlKCdjb21taXRkaWZmJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufTtcblxuQ29tbWl0RGlmZi5wcm90b3R5cGUubG9hZEZpbGVMaW5lRGlmZnMgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciB0ZW1wQ29tbWl0TGluZURpZmZzID0gW107XG4gIHZhciBsaW5lRGlmZkxlbmd0aCA9IHRoaXMuY29tbWl0TGluZURpZmZzKCkubGVuZ3RoO1xuXG4gIGFyZ3MuZmlsZUxpbmVEaWZmcy5zbGljZShsaW5lRGlmZkxlbmd0aCA9PT0gMCA/IDAgOiBsaW5lRGlmZkxlbmd0aCArIDEsIHRoaXMubWF4TnVtYmVyT2ZGaWxlc1Nob3duKS5mb3JFYWNoKGZ1bmN0aW9uKGZpbGVMaW5lRGlmZikge1xuICAgIGFyZ3MuZmlsZUxpbmVEaWZmID0gZmlsZUxpbmVEaWZmO1xuICAgIHRlbXBDb21taXRMaW5lRGlmZnMucHVzaChuZXcgQ29tbWl0TGluZURpZmYoYXJncykpO1xuICB9KTtcblxuICB0aGlzLmNvbW1pdExpbmVEaWZmcyh0aGlzLmNvbW1pdExpbmVEaWZmcygpLmNvbmNhdCh0ZW1wQ29tbWl0TGluZURpZmZzKSk7XG59XG4iLCJ2YXIga28gPSByZXF1aXJlKCdrbm9ja291dCcpO1xudmFyIGNvbXBvbmVudHMgPSByZXF1aXJlKCd1bmdpdC1jb21wb25lbnRzJyk7XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCd1dGlsJykuaW5oZXJpdHM7XG52YXIgZmlsZVR5cGUgPSByZXF1aXJlKCcuLi8uLi9zb3VyY2UvdXRpbHMvZmlsZS10eXBlLmpzJyk7XG52YXIgcHJvZ3JhbUV2ZW50cyA9IHJlcXVpcmUoJ3VuZ2l0LXByb2dyYW0tZXZlbnRzJyk7XG5cbnZhciBDb21taXRMaW5lRGlmZiA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLmFkZGVkID0ga28ub2JzZXJ2YWJsZShhcmdzLmZpbGVMaW5lRGlmZlswXSk7XG4gIHRoaXMucmVtb3ZlZCA9IGtvLm9ic2VydmFibGUoYXJncy5maWxlTGluZURpZmZbMV0pO1xuICB0aGlzLmZpbGVOYW1lID0ga28ub2JzZXJ2YWJsZShhcmdzLmZpbGVMaW5lRGlmZlsyXSk7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcbiAgdGhpcy5yZXBvUGF0aCA9IGFyZ3MucmVwb1BhdGg7XG4gIHRoaXMuc2VydmVyID0gYXJncy5zZXJ2ZXI7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy50ZXh0RGlmZlR5cGUgPSBhcmdzLnRleHREaWZmVHlwZTtcbiAgdGhpcy5zcGVjaWZpY0RpZmYgPSBrby5vYnNlcnZhYmxlKHRoaXMuZ2V0U3BlY2lmaWNEaWZmKCkpO1xufTtcbmV4cG9ydHMuQ29tbWl0TGluZURpZmYgPSBDb21taXRMaW5lRGlmZjtcblxuQ29tbWl0TGluZURpZmYucHJvdG90eXBlLmdldFNwZWNpZmljRGlmZiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gY29tcG9uZW50cy5jcmVhdGUoIXRoaXMuZmlsZU5hbWUoKSB8fCBmaWxlVHlwZSh0aGlzLmZpbGVOYW1lKCkpID09ICd0ZXh0JyA/ICd0ZXh0ZGlmZicgOiAnaW1hZ2VkaWZmJywge1xuICAgIGZpbGVuYW1lOiB0aGlzLmZpbGVOYW1lKCksXG4gICAgcmVwb1BhdGg6IHRoaXMucmVwb1BhdGgsXG4gICAgc2VydmVyOiB0aGlzLnNlcnZlcixcbiAgICBzaGExOiB0aGlzLnNoYTEsXG4gICAgdGV4dERpZmZUeXBlOiB0aGlzLnRleHREaWZmVHlwZSxcbiAgICBpc1Nob3dpbmdEaWZmczogdGhpcy5pc1Nob3dpbmdEaWZmc1xuICB9KTtcbn1cblxuQ29tbWl0TGluZURpZmYucHJvdG90eXBlLmZpbGVOYW1lQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pc1Nob3dpbmdEaWZmcyghdGhpcy5pc1Nob3dpbmdEaWZmcygpKTtcbiAgdGhpcy5zcGVjaWZpY0RpZmYoKS5pbnZhbGlkYXRlRGlmZihmdW5jdGlvbigpIHtcbiAgICBwcm9ncmFtRXZlbnRzLmRpc3BhdGNoKHsgZXZlbnQ6ICdncmFwaC1yZW5kZXInIH0pO1xuICB9KTtcbn07XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciBpbWFnZUZpbGVFeHRlbnNpb25zID0gWycuUE5HJywgJy5KUEcnLCAnLkJNUCcsICcuR0lGJywgJy5KUEVHJ107XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmlsZU5hbWUpIHtcbiAgcmV0dXJuIGltYWdlRmlsZUV4dGVuc2lvbnMuaW5kZXhPZihwYXRoLmV4dG5hbWUoZmlsZU5hbWUpLnRvVXBwZXJDYXNlKCkpID4gLTEgPyAnaW1hZ2UnIDogJ3RleHQnO1xufVxuIl19
