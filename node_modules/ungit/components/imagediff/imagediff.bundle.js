(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

var ko = require('knockout');
var components = require('ungit-components');

components.register('imagediff', function(args) {
  return new ImageDiffViewModel(args);
});

var ImageDiffViewModel = function(args) {
  var self = this;
  this.filename = args.filename;
  this.repoPath = args.repoPath;
  this.isNew = ko.observable(false);
  this.isRemoved = ko.observable(false);
  this.sha1 = args.sha1;
  this.state = ko.computed(function() {
    if (self.isNew()) return 'new';
    if (self.isRemoved()) return 'removed';
    return 'changed';
  });
  this.oldImageSrc = ko.computed(function() {
    return '/api/diff/image?path=' + encodeURIComponent(self.repoPath) + '&filename=' + self.filename + '&version=' + (self.sha1 ? self.sha1 + '^': 'HEAD');
  });
  this.newImageSrc = ko.computed(function() {
    return '/api/diff/image?path=' + encodeURIComponent(self.repoPath) + '&filename=' + self.filename + '&version=' + (self.sha1 ? self.sha1: 'current');
  });
  this.isShowingDiffs = args.isShowingDiffs;
}
ImageDiffViewModel.prototype.updateNode = function(parentElement) {
  ko.renderTemplate('imagediff', this, {}, parentElement);
}
ImageDiffViewModel.prototype.invalidateDiff = function(callback) {
  if (callback) callback();
}
ImageDiffViewModel.prototype.newImageError = function(data, event) {
  this.isRemoved(true);
}
ImageDiffViewModel.prototype.oldImageError = function(data, event) {
  this.isNew(true);
}

},{"knockout":"knockout","ungit-components":"ungit-components"}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb21wb25lbnRzL2ltYWdlZGlmZi9pbWFnZWRpZmYuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlxudmFyIGtvID0gcmVxdWlyZSgna25vY2tvdXQnKTtcbnZhciBjb21wb25lbnRzID0gcmVxdWlyZSgndW5naXQtY29tcG9uZW50cycpO1xuXG5jb21wb25lbnRzLnJlZ2lzdGVyKCdpbWFnZWRpZmYnLCBmdW5jdGlvbihhcmdzKSB7XG4gIHJldHVybiBuZXcgSW1hZ2VEaWZmVmlld01vZGVsKGFyZ3MpO1xufSk7XG5cbnZhciBJbWFnZURpZmZWaWV3TW9kZWwgPSBmdW5jdGlvbihhcmdzKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5maWxlbmFtZSA9IGFyZ3MuZmlsZW5hbWU7XG4gIHRoaXMucmVwb1BhdGggPSBhcmdzLnJlcG9QYXRoO1xuICB0aGlzLmlzTmV3ID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuaXNSZW1vdmVkID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XG4gIHRoaXMuc2hhMSA9IGFyZ3Muc2hhMTtcbiAgdGhpcy5zdGF0ZSA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLmlzTmV3KCkpIHJldHVybiAnbmV3JztcbiAgICBpZiAoc2VsZi5pc1JlbW92ZWQoKSkgcmV0dXJuICdyZW1vdmVkJztcbiAgICByZXR1cm4gJ2NoYW5nZWQnO1xuICB9KTtcbiAgdGhpcy5vbGRJbWFnZVNyYyA9IGtvLmNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnL2FwaS9kaWZmL2ltYWdlP3BhdGg9JyArIGVuY29kZVVSSUNvbXBvbmVudChzZWxmLnJlcG9QYXRoKSArICcmZmlsZW5hbWU9JyArIHNlbGYuZmlsZW5hbWUgKyAnJnZlcnNpb249JyArIChzZWxmLnNoYTEgPyBzZWxmLnNoYTEgKyAnXic6ICdIRUFEJyk7XG4gIH0pO1xuICB0aGlzLm5ld0ltYWdlU3JjID0ga28uY29tcHV0ZWQoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcvYXBpL2RpZmYvaW1hZ2U/cGF0aD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHNlbGYucmVwb1BhdGgpICsgJyZmaWxlbmFtZT0nICsgc2VsZi5maWxlbmFtZSArICcmdmVyc2lvbj0nICsgKHNlbGYuc2hhMSA/IHNlbGYuc2hhMTogJ2N1cnJlbnQnKTtcbiAgfSk7XG4gIHRoaXMuaXNTaG93aW5nRGlmZnMgPSBhcmdzLmlzU2hvd2luZ0RpZmZzO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS51cGRhdGVOb2RlID0gZnVuY3Rpb24ocGFyZW50RWxlbWVudCkge1xuICBrby5yZW5kZXJUZW1wbGF0ZSgnaW1hZ2VkaWZmJywgdGhpcywge30sIHBhcmVudEVsZW1lbnQpO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS5pbnZhbGlkYXRlRGlmZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbn1cbkltYWdlRGlmZlZpZXdNb2RlbC5wcm90b3R5cGUubmV3SW1hZ2VFcnJvciA9IGZ1bmN0aW9uKGRhdGEsIGV2ZW50KSB7XG4gIHRoaXMuaXNSZW1vdmVkKHRydWUpO1xufVxuSW1hZ2VEaWZmVmlld01vZGVsLnByb3RvdHlwZS5vbGRJbWFnZUVycm9yID0gZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHtcbiAgdGhpcy5pc05ldyh0cnVlKTtcbn1cbiJdfQ==
